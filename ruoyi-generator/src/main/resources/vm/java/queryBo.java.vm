package ${packageName}.bo;

import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import lombok.Data;
import lombok.EqualsAndHashCode;
import cn.hutool.core.lang.Validator;
import cn.hutool.core.util.StrUtil;
import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;
import com.baomidou.mybatisplus.core.toolkit.Wrappers;
import com.fasterxml.jackson.annotation.JsonFormat;
import ${packageName}.domain.${ClassName};
import java.util.Date;

#foreach ($import in $importList)
import ${import};
#end
#if($table.crud || $table.sub)
import com.ruoyi.common.core.domain.QueryEntity;
#elseif($table.tree)
import com.ruoyi.common.core.domain.TreeEntity;
#end

/**
 * ${functionName}分页查询对象 ${tableName}
 *
 * @author ${author}
 * @date ${datetime}
 */
#if($table.crud || $table.sub)
#set($Entity="QueryEntity")
#elseif($table.tree)
#set($Entity="TreeEntity")
#end

@Data
@EqualsAndHashCode(callSuper = true)
@ApiModel("${functionName}分页查询对象")
public class ${ClassName}QueryBo extends ${Entity} {

#foreach ($column in $columns)
#if($column.query)
#if($column.queryType != 'BETWEEN')
    /** $column.columnComment */
#if($column.javaType == 'Date')
    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss")
#end
    @ApiModelProperty("$column.columnComment")
    private $column.javaType $column.javaField;
#else
    #set($AttrName=$column.javaField.substring(0,1).toUpperCase() + ${column.javaField.substring(1)})
    /** $column.columnComment 开始 */
#if($column.javaType == 'Date')
    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss")
#end
    @ApiModelProperty("$column.columnComment 开始")
    private $column.javaType begin$AttrName;
    /** $column.columnComment 结束 */
#if($column.javaType == 'Date')
    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss")
#end
    @ApiModelProperty("$column.columnComment 结束")
    private $column.javaType end$AttrName;
#end
#end
#end

    /**
    * 获取查询wrapper对象
    * @return wrapper对象
    */
    public LambdaQueryWrapper<${ClassName}> queryWrapper() {
        LambdaQueryWrapper<${ClassName}> lqw = Wrappers.lambdaQuery();
#foreach($column in $columns)
#if($column.query)
#set($queryType=$column.queryType)
#set($javaField=$column.javaField)
#set($javaType=$column.javaType)
#set($columnName=$column.columnName)
#set($AttrName=$column.javaField.substring(0,1).toUpperCase() + ${column.javaField.substring(1)})
#set($mpMethod=$column.queryType.toLowerCase())
#if($queryType != 'BETWEEN')
#if($javaType == 'String')
#set($condition='StrUtil.isNotBlank('+$javaField+')')
#else
#set($condition=$javaField+' != null')
#end
        lqw.$mpMethod($condition, ${ClassName}::get$AttrName, $javaField);
#else
#if($javaType == 'Date')
        lqw.apply(Validator.isNotEmpty(begin$AttrName),
                "date_format($columnName,'%y%m%d') >= date_format({0},'%y%m%d')",
                begin$AttrName)
            .apply(Validator.isNotEmpty(end$AttrName),
                "date_format($columnName,'%y%m%d') <= date_format({0},'%y%m%d')",
                end$AttrName);
#else
        lqw.between(begin$AttrName != null && end$AttrName != null,
            ${ClassName}::get$AttrName ,begin$AttrName, end$AttrName);
#end
#end
#end
#end
        return lqw;
    }
}
